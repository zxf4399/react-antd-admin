{"version":3,"file":".pnpm/mdast-util-to-hast@12.1.1/node_modules/mdast-util-to-hast/lib.e2ce1724babf33ef88b8.js","mappings":"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","sources":["webpack://react-antd-admin/./node_modules/.pnpm/mdast-util-to-hast@12.1.1/node_modules/mdast-util-to-hast/lib/index.js","webpack://react-antd-admin/./node_modules/.pnpm/mdast-util-to-hast@12.1.1/node_modules/mdast-util-to-hast/lib/footer.js","webpack://react-antd-admin/./node_modules/.pnpm/mdast-util-to-hast@12.1.1/node_modules/mdast-util-to-hast/lib/revert.js","webpack://react-antd-admin/./node_modules/.pnpm/mdast-util-to-hast@12.1.1/node_modules/mdast-util-to-hast/lib/traverse.js","webpack://react-antd-admin/./node_modules/.pnpm/mdast-util-to-hast@12.1.1/node_modules/mdast-util-to-hast/lib/wrap.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {string} clobberPrefix Prefix to use to prevent DOM clobbering\n * @property {string} footnoteLabel Label to use to introduce the footnote section\n * @property {string} footnoteBackLabel Label to use to go back to a footnote call from the footnote section\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Record<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array<string>} footnoteOrder Order in which footnotes occur\n * @property {Record<string, number>} footnoteCounts Counts the same footnote was used\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false]\n *   Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {Handlers} [handlers]\n *   Object mapping mdast nodes to functions handling them\n * @property {Array<string>} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\n *   Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  h.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  h.footnoteCounts = {}\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('./index.js').H} H\n */\n\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n */\nexport function footer(h) {\n  let index = -1\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n\n  while (++index < h.footnoteOrder.length) {\n    const def = h.footnoteById[h.footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const content = all(h, def)\n    const id = String(def.identifier)\n    const safeId = sanitizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= h.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            h.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: h.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: h.clobberPrefix + 'fn-' + safeId},\n      children: wrap(content, true)\n    }\n\n    if (def.position) {\n      listItem.position = def.position\n    }\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: 'h2',\n        properties: {id: 'footnote-label', className: ['sr-only']},\n        children: [u('text', h.footnoteLabel)]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n"],"names":["own","hasOwnProperty","toHast","tree","options","h","settings","dangerous","allowDangerousHtml","footnoteById","clobberPrefix","undefined","footnoteLabel","footnoteBackLabel","definition","footnoteOrder","footnoteCounts","augment","handlers","unknownHandler","passThrough","id","String","identifier","toUpperCase","call","left","right","data","hName","type","tagName","properties","children","hProperties","hChildren","ctx","position","start","end","node","props","Array","isArray","factory","foot","index","listItems","length","def","content","safeId","toLowerCase","referenceIndex","backReferences","backReference","href","dataFootnoteBackref","className","ariaLabel","value","push","tail","tailTail","listItem","wrap","dataFootnotes","u","footer","revert","subtype","referenceType","suffix","label","alt","contents","head","unshift","unknown","all","one","parent","fn","Error","includes","returnNode","values","nodes","result","replace","loose"],"sourceRoot":""}