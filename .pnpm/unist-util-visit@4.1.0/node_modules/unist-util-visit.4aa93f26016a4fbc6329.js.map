{"version":3,"file":".pnpm/unist-util-visit@4.1.0/node_modules/unist-util-visit.4aa93f26016a4fbc6329.js","mappings":"4JAoBO,MAAMA,EAOX,SAOYC,EAAMC,EAAMC,EAASC,GACT,mBAATF,GAA0C,mBAAZC,IACvCC,EAAUD,EACVA,EAAUD,EACVA,EAAO,OAGT,QAAaD,EAAMC,GAMnB,SAAkBG,EAAMC,GACtB,MAAMC,EAASD,EAAQA,EAAQE,OAAS,GACxC,OAAOL,EACLE,EACAE,EAASA,EAAOE,SAASC,QAAQL,GAAQ,KACzCE,KAX+BH","sources":["webpack://tech-stack/./node_modules/.pnpm/unist-util-visit@4.1.0/node_modules/unist-util-visit/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types').Visitor} Visitor\n */\n\nimport {visitParents, CONTINUE, SKIP, EXIT} from 'unist-util-visit-parents'\n\nexport {CONTINUE, SKIP, EXIT}\n\n/**\n * Visit children of tree which pass a test\n *\n * @param tree Abstract syntax tree to walk\n * @param test Test, optional\n * @param visitor Function to run for each node\n * @param reverse Fisit the tree in reverse, defaults to false\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array.<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n"],"names":["visit","tree","test","visitor","reverse","node","parents","parent","length","children","indexOf"],"sourceRoot":""}