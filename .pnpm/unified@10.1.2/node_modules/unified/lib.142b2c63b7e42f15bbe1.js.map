{"version":3,"file":".pnpm/unified@10.1.2/node_modules/unified/lib.142b2c63b7e42f15bbe1.js","mappings":"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","sources":["webpack://tech-stack/./node_modules/.pnpm/unified@10.1.2/node_modules/unified/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n"],"names":["unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","data","key","value","arguments","length","assertUnfrozen","own","call","Parser","undefined","Compiler","freeze","attacher","options","transformer","use","Number","POSITIVE_INFINITY","settings","addPlugin","TypeError","Array","isArray","addList","addPreset","Object","assign","add","plugin","result","plugins","index","entry","push","parse","doc","file","vfile","assertParser","newable","String","stringify","node","assertCompiler","assertNode","compile","run","callback","Promise","executor","resolve","reject","error","tree","runSync","complete","assertDone","process","done","processSync","destination","hasOwnProperty","name","prototype","keys","Error","type","asyncName","Boolean","looksLikeAVFile"],"sourceRoot":""}