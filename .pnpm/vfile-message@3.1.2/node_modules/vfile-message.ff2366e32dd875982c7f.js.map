{"version":3,"file":".pnpm/vfile-message@3.1.2/node_modules/vfile-message.ff2366e32dd875982c7f.js","mappings":"uKASO,MAAMA,UAAqBC,MAShCC,YAAYC,EAAQC,EAAOC,GAEzB,MAAMC,EAAQ,CAAC,KAAM,MAErB,IAAIC,EAAW,CAEbC,MAAO,CAACC,KAAM,KAAMC,OAAQ,MAE5BC,IAAK,CAACF,KAAM,KAAMC,OAAQ,OAU5B,GAPAE,QAEqB,iBAAVR,IACTC,EAASD,EACTA,OAAQS,GAGY,iBAAXR,EAAqB,CAC9B,MAAMS,EAAQT,EAAOU,QAAQ,MAEd,IAAXD,EACFR,EAAM,GAAKD,GAEXC,EAAM,GAAKD,EAAOW,MAAM,EAAGF,GAC3BR,EAAM,GAAKD,EAAOW,MAAMF,EAAQ,IAIhCV,IAEE,SAAUA,GAAS,aAAcA,EAC/BA,EAAMG,WACRA,EAAWH,EAAMG,UAIZ,UAAWH,GAAS,QAASA,EACpCG,EAAWH,GAGJ,SAAUA,GAAS,WAAYA,KACtCG,EAASC,MAAQJ,IAKrBa,KAAKC,MAAO,OAAkBd,IAAU,MACxCa,KAAKE,QAA4B,iBAAXhB,EAAsBA,EAAOgB,QAAUhB,EAC7Dc,KAAKG,MAA0B,iBAAXjB,EAAsBA,EAAOiB,MAAQ,GAMzDH,KAAKd,OAASc,KAAKE,QAMnBF,KAAKI,MAKLJ,KAAKR,KAAOF,EAASC,MAAMC,KAK3BQ,KAAKP,OAASH,EAASC,MAAME,OAK7BO,KAAKK,OAAShB,EAAM,GAKpBW,KAAKM,OAASjB,EAAM,GAMpBW,KAAKV,SAAWA,EAYhBU,KAAKO,OAMLP,KAAKQ,SAKLR,KAAKS,KAKLT,KAAKU,IAKLV,KAAKW,MAKT5B,EAAa6B,UAAUH,KAAO,GAC9B1B,EAAa6B,UAAUX,KAAO,GAC9BlB,EAAa6B,UAAU1B,OAAS,GAChCH,EAAa6B,UAAUV,QAAU,GACjCnB,EAAa6B,UAAUT,MAAQ,GAC/BpB,EAAa6B,UAAUR,MAAQ,KAC/BrB,EAAa6B,UAAUnB,OAAS,KAChCV,EAAa6B,UAAUpB,KAAO,KAC9BT,EAAa6B,UAAUP,OAAS,KAChCtB,EAAa6B,UAAUN,OAAS,KAChCvB,EAAa6B,UAAUtB,SAAW","sources":["webpack://react-antd-admin/./node_modules/.pnpm/vfile-message@3.1.2/node_modules/vfile-message/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string|null, string|null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.fatal\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You can use this to specify the source value that’s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n    this.actual\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n    this.expected\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n"],"names":["VFileMessage","Error","constructor","reason","place","origin","parts","position","start","line","column","end","super","undefined","index","indexOf","slice","this","name","message","stack","fatal","source","ruleId","actual","expected","file","url","note","prototype"],"sourceRoot":""}