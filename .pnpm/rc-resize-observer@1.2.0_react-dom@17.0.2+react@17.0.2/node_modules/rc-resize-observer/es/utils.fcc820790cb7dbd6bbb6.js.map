{"version":3,"file":".pnpm/rc-resize-observer@1.2.0_react-dom@17.0.2+react@17.0.2/node_modules/rc-resize-observer/es/utils.fcc820790cb7dbd6bbb6.js","mappings":"gMAEIA,EAAmB,IAAIC,IAcvBC,EAAiB,IAAI,KAZzB,SAAkBC,GAChBA,EAASC,SAAQ,SAAUC,GACzB,IAAIC,EAEAC,EAASF,EAAOE,OACuC,QAA1DD,EAAwBN,EAAiBQ,IAAID,UAA+C,IAA1BD,GAA4CA,EAAsBF,SAAQ,SAAUK,GACrJ,OAAOA,EAASF,YAaf,SAASG,EAAQC,EAASC,GAC1BZ,EAAiBa,IAAIF,KACxBX,EAAiBc,IAAIH,EAAS,IAAII,KAClCb,EAAeQ,QAAQC,IAGzBX,EAAiBQ,IAAIG,GAASK,IAAIJ,GAE7B,SAASK,EAAUN,EAASC,GAC7BZ,EAAiBa,IAAIF,KACvBX,EAAiBQ,IAAIG,GAASO,OAAON,GAEhCZ,EAAiBQ,IAAIG,GAASQ,OACjCjB,EAAee,UAAUN,GACzBX,EAAiBkB,OAAOP","sources":["webpack://react-antd-admin/./node_modules/.pnpm/rc-resize-observer@1.2.0_react-dom@17.0.2+react@17.0.2/node_modules/rc-resize-observer/es/utils/observerUtil.js"],"sourcesContent":["import ResizeObserver from 'resize-observer-polyfill'; // =============================== Const ===============================\n\nvar elementListeners = new Map();\n\nfunction onResize(entities) {\n  entities.forEach(function (entity) {\n    var _elementListeners$get;\n\n    var target = entity.target;\n    (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 ? void 0 : _elementListeners$get.forEach(function (listener) {\n      return listener(target);\n    });\n  });\n} // Note: ResizeObserver polyfill not support option to measure border-box resize\n\n\nvar resizeObserver = new ResizeObserver(onResize); // Dev env only\n\nexport var _el = process.env.NODE_ENV !== 'production' ? elementListeners : null; // eslint-disable-line\n\nexport var _rs = process.env.NODE_ENV !== 'production' ? onResize : null; // eslint-disable-line\n// ============================== Observe ==============================\n\nexport function observe(element, callback) {\n  if (!elementListeners.has(element)) {\n    elementListeners.set(element, new Set());\n    resizeObserver.observe(element);\n  }\n\n  elementListeners.get(element).add(callback);\n}\nexport function unobserve(element, callback) {\n  if (elementListeners.has(element)) {\n    elementListeners.get(element).delete(callback);\n\n    if (!elementListeners.get(element).size) {\n      resizeObserver.unobserve(element);\n      elementListeners.delete(element);\n    }\n  }\n}"],"names":["elementListeners","Map","resizeObserver","entities","forEach","entity","_elementListeners$get","target","get","listener","observe","element","callback","has","set","Set","add","unobserve","delete","size"],"sourceRoot":""}