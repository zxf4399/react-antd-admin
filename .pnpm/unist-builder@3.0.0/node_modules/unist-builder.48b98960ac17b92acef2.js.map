{"version":3,"file":".pnpm/unist-builder@3.0.0/node_modules/unist-builder.48b98960ac17b92acef2.js","mappings":"0JAeO,IAAIA,EAEP,SAOQC,EAAMC,EAAOC,GAErB,IAAIC,EAAO,CAACH,KAAMI,OAAOJ,IAiBzB,OAdE,MAACE,GACiB,iBAAVD,IAAsBI,MAAMC,QAAQL,GAI5CM,OAAOC,OAAOL,EAAMF,GAFpBC,EAAQD,EAKNI,MAAMC,QAAQJ,GAChBC,EAAKM,SAAWP,EACPA,MAAAA,IACTC,EAAKD,MAAQE,OAAOF,IAGfC","sources":["webpack://react-antd-admin/./node_modules/.pnpm/unist-builder@3.0.0/node_modules/unist-builder/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist').Literal} Literal\n * @typedef {Object.<string, unknown>} Props\n * @typedef {Array.<Node>|string} ChildrenOrValue\n *\n * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps\n * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent\n * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral\n * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid\n */\n\nexport var u = /**\n * @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}\n */ (\n  /**\n   * @param {string} type Type of node\n   * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)\n   * @param {ChildrenOrValue} [value] `children` or `value` of node\n   * @returns {Node}\n   */\n  function (type, props, value) {\n    /** @type {Node} */\n    var node = {type: String(type)}\n\n    if (\n      (value === undefined || value === null) &&\n      (typeof props === 'string' || Array.isArray(props))\n    ) {\n      value = props\n    } else {\n      Object.assign(node, props)\n    }\n\n    if (Array.isArray(value)) {\n      node.children = value\n    } else if (value !== undefined && value !== null) {\n      node.value = String(value)\n    }\n\n    return node\n  }\n)\n"],"names":["u","type","props","value","node","String","Array","isArray","Object","assign","children"],"sourceRoot":""}