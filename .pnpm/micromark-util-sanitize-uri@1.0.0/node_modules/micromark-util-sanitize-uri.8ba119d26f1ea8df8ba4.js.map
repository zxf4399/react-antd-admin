{"version":3,"file":".pnpm/micromark-util-sanitize-uri@1.0.0/node_modules/micromark-util-sanitize-uri.8ba119d26f1ea8df8ba4.js","mappings":"sKAsBO,SAASA,EAAYC,EAAKC,GAC/B,MAAMC,GAAQ,OAkChB,SAAsBA,GAEpB,MAAMC,EAAS,GACf,IAAIC,GAAS,EACTC,EAAQ,EACRC,EAAO,EAEX,OAASF,EAAQF,EAAMK,QAAQ,CAC7B,MAAMC,EAAON,EAAMO,WAAWL,GAG9B,IAAIM,EAAU,GAEd,GACW,KAATF,IACA,QAAkBN,EAAMO,WAAWL,EAAQ,MAC3C,QAAkBF,EAAMO,WAAWL,EAAQ,IAE3CE,EAAO,OAEJ,GAAIE,EAAO,IACT,oBAAoBG,KAAKC,OAAOC,aAAaL,MAChDE,EAAUE,OAAOC,aAAaL,SAG7B,GAAIA,EAAO,OAASA,EAAO,MAAO,CACrC,MAAMM,EAAOZ,EAAMO,WAAWL,EAAQ,GAElCI,EAAO,OAASM,EAAO,OAASA,EAAO,OACzCJ,EAAUE,OAAOC,aAAaL,EAAMM,GACpCR,EAAO,GAGPI,EAAU,SAIZA,EAAUE,OAAOC,aAAaL,GAG5BE,IACFP,EAAOY,KAAKb,EAAMc,MAAMX,EAAOD,GAAQa,mBAAmBP,IAC1DL,EAAQD,EAAQE,EAAO,EACvBI,EAAU,IAGRJ,IACFF,GAASE,EACTA,EAAO,GAIX,OAAOH,EAAOe,KAAK,IAAMhB,EAAMc,MAAMX,GAtFhBc,CAAanB,GAAO,KAEzC,IAAKC,EACH,OAAOC,EAGT,MAAMkB,EAAQlB,EAAMmB,QAAQ,KACtBC,EAAepB,EAAMmB,QAAQ,KAC7BE,EAAarB,EAAMmB,QAAQ,KAC3BG,EAAQtB,EAAMmB,QAAQ,KAE5B,OAEED,EAAQ,GACPI,GAAS,GAAKJ,EAAQI,GACtBF,GAAgB,GAAKF,EAAQE,GAC7BC,GAAc,GAAKH,EAAQG,GAC5BtB,EAASU,KAAKT,EAAMc,MAAM,EAAGI,IAEtBlB,EAGF","sources":["webpack://tech-stack/./node_modules/.pnpm/micromark-util-sanitize-uri@1.0.0/node_modules/micromark-util-sanitize-uri/index.js"],"sourcesContent":["import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nfunction normalizeUri(value) {\n  /** @type {string[]} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n"],"names":["sanitizeUri","url","protocol","value","result","index","start","skip","length","code","charCodeAt","replace","test","String","fromCharCode","next","push","slice","encodeURIComponent","join","normalizeUri","colon","indexOf","questionMark","numberSign","slash"],"sourceRoot":""}