{"version":3,"file":".pnpm/micromark-util-resolve-all@1.0.0/node_modules/micromark-util-resolve-all.d33fb7950b8512b44051.js","mappings":"8GAcO,SAASA,EAAWC,EAAYC,EAAQC,GAE7C,MAAMC,EAAS,GACf,IAAIC,GAAS,EAEb,OAASA,EAAQJ,EAAWK,QAAQ,CAClC,MAAMC,EAAUN,EAAWI,GAAOL,WAE9BO,IAAYH,EAAOI,SAASD,KAC9BL,EAASK,EAAQL,EAAQC,GACzBC,EAAOK,KAAKF,IAIhB,OAAOL,E","sources":["webpack://tech-stack/./node_modules/.pnpm/micromark-util-resolve-all@1.0.0/node_modules/micromark-util-resolve-all/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n"],"names":["resolveAll","constructs","events","context","called","index","length","resolve","includes","push"],"sourceRoot":""}