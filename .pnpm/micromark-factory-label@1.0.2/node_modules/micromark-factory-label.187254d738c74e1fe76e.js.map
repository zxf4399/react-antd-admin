{"version":3,"file":".pnpm/micromark-factory-label@1.0.2/node_modules/micromark-factory-label.187254d738c74e1fe76e.js","mappings":"wKAkBO,SAASA,EAAaC,EAASC,EAAIC,EAAKC,EAAMC,EAAYC,GAC/D,MAAMC,EAAOC,KACb,IAGIC,EAHAC,EAAO,EAIX,OAGA,SAAeC,GAMb,OALAV,EAAQW,MAAMR,GACdH,EAAQW,MAAMP,GACdJ,EAAQY,QAAQF,GAChBV,EAAQa,KAAKT,GACbJ,EAAQW,MAAMN,GACPS,GAIT,SAASA,EAAQJ,GACf,OACW,OAATA,GACS,KAATA,GACU,KAATA,IAAgBF,GAQP,KAATE,IACED,GACD,2BAA4BH,EAAKS,OAAOC,YAC1CP,EAAO,IAEAP,EAAIQ,GAGA,KAATA,GACFV,EAAQa,KAAKR,GACbL,EAAQW,MAAMP,GACdJ,EAAQY,QAAQF,GAChBV,EAAQa,KAAKT,GACbJ,EAAQa,KAAKV,GACNF,IAGL,QAAmBS,IACrBV,EAAQW,MAAM,cACdX,EAAQY,QAAQF,GAChBV,EAAQa,KAAK,cACNC,IAGTd,EAAQW,MAAM,cAAe,CAC3BM,YAAa,WAERC,EAAMR,IAIf,SAASQ,EAAMR,GACb,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACA,QAAmBA,IACnBD,IAAS,KAETT,EAAQa,KAAK,eACNC,EAAQJ,KAGjBV,EAAQY,QAAQF,GAChBF,EAAOA,KAAS,QAAcE,GACd,KAATA,EAAcS,EAAcD,GAIrC,SAASC,EAAYT,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCV,EAAQY,QAAQF,GAChBD,IACOS,GAGFA,EAAMR","sources":["webpack://react-antd-admin/./node_modules/.pnpm/micromark-factory-label@1.0.2/node_modules/micromark-factory-label/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n"],"names":["factoryLabel","effects","ok","nok","type","markerType","stringType","self","this","data","size","code","enter","consume","exit","atBreak","parser","constructs","contentType","label","labelEscape"],"sourceRoot":""}