{"version":3,"file":".pnpm/unist-util-visit-parents@5.1.0/node_modules/unist-util-visit-parents.c6d4709b63ec17cef421.js","mappings":"wKAiBO,MAkBMA,EAOX,SAOYC,EAAMC,EAAMC,EAASC,GACT,mBAATF,GAA0C,mBAAZC,IACvCC,EAAUD,EAEVA,EAAUD,EACVA,EAAO,MAGT,MAAMG,GAAK,OAAQH,GACbI,EAAOF,GAAW,EAAI,GAS5B,SAASG,EAAQC,EAAMC,EAAOC,GAG5B,MAAMC,EAAwB,iBAATH,GAA8B,OAATA,EAAgBA,EAAO,GAEjE,IAAII,EAkBJ,MAhB0B,iBAAfD,EAAME,OACfD,EAC2B,iBAAlBD,EAAMG,QACTH,EAAMG,QACgB,iBAAfH,EAAMC,KACbD,EAAMC,UACNG,EAENC,OAAOC,eAAeC,EAAO,OAAQ,CACnCP,MACE,SACMA,EAAME,MAAQD,EAAO,IAAMA,EAAO,IAAM,IAC9C,OAICM,EAEP,SAASA,IAEP,IAEIC,EAEAC,EAEAC,EANAC,EAAS,GAQb,KAAKpB,GAAQG,EAAGG,EAAMC,EAAOC,EAAQA,EAAQa,OAAS,IAAM,SAC1DD,EAsCZ,SAAkBX,GAChB,OAAIa,MAAMC,QAAQd,GACTA,EAGY,iBAAVA,EACF,EAlIa,EAkIFA,GAGb,CAACA,GA/CWe,CAASvB,EAAQK,EAAME,KA9ExB,IAgFJY,EAAO,IACT,OAAOA,EAKX,GAAId,EAAKmB,UA1FC,SA0FWL,EAAO,GAO1B,IALAF,GAAUhB,EAAUI,EAAKmB,SAASJ,QAAU,GAAKjB,EAEjDe,EAAeX,EAAQkB,OAAOpB,GAGvBY,GAAU,GAAKA,EAASZ,EAAKmB,SAASJ,QAAQ,CAInD,GAFAJ,EAAYZ,EAAQC,EAAKmB,SAASP,GAASA,EAAQC,EAAvCd,IA/FN,IAiGFY,EAAU,GACZ,OAAOA,EAGTC,EAC0B,iBAAjBD,EAAU,GAAkBA,EAAU,GAAKC,EAASd,EAIjE,OAAOgB,GAvEXf,CAAQN,EAAM,KAAM,GAApBM","sources":["webpack://react-antd-admin/./node_modules/.pnpm/unist-util-visit-parents@5.1.0/node_modules/unist-util-visit-parents/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('./complex-types').Action} Action\n * @typedef {import('./complex-types').Index} Index\n * @typedef {import('./complex-types').ActionTuple} ActionTuple\n * @typedef {import('./complex-types').VisitorResult} VisitorResult\n * @typedef {import('./complex-types').Visitor} Visitor\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = true\n/**\n * Do not traverse this nodeâ€™s children\n */\nexport const SKIP = 'skip'\n/**\n * Stop traversing immediately\n */\nexport const EXIT = false\n\n/**\n * Visit children of tree which pass a test\n *\n * @param tree Abstract syntax tree to walk\n * @param test Test node, optional\n * @param visitor Function to run for each node\n * @param reverse Visit the tree in reverse order, defaults to false\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types').Visitor<Node>} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, null, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number?} index\n       * @param {Array.<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Object.<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = typeof node === 'object' && node !== null ? node : {}\n        /** @type {string|undefined} */\n        let name\n\n        if (typeof value.type === 'string') {\n          name =\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' +\n              color(value.type + (name ? '<' + name + '>' : '')) +\n              ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array.<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n"],"names":["visitParents","tree","test","visitor","reverse","is","step","factory","node","index","parents","value","name","type","tagName","undefined","Object","defineProperty","visit","subresult","offset","grandparents","result","length","Array","isArray","toResult","children","concat"],"sourceRoot":""}