{"version":3,"file":".pnpm/trough@2.1.0/node_modules/trough.c3aa7c810e46261cf110.js","mappings":"8GAiBO,SAASA,IAEd,MAAMC,EAAM,GAENC,EAAW,CAACC,IAKlB,YAAgBC,GACd,IAAIC,GAAmB,EAEvB,MAAMC,EAAWF,EAAOG,MAExB,GAAwB,mBAAbD,EACT,MAAM,IAAIE,UAAU,2CAA6CF,IAWnE,SAASG,EAAKC,KAAUC,GACtB,MAAMC,EAAKX,IAAMI,GACjB,IAAIQ,GAAS,EAEb,GAAIH,EACFJ,EAASI,OADX,CAMA,OAASG,EAAQT,EAAOU,QACA,OAAlBH,EAAOE,SAAqCE,IAAlBJ,EAAOE,KACnCF,EAAOE,GAAST,EAAOS,IAK3BT,EAASO,EAGLC,EA6BH,SAAcI,EAAYV,GAE/B,IAAIW,EAEJ,OAQA,YAAoBC,GAClB,MAAMC,EAAoBH,EAAWF,OAASI,EAAWJ,OAEzD,IAAIM,EAEAD,GACFD,EAAWG,KAAKC,GAGlB,IACEF,EAASJ,EAAWO,MAAMC,KAAMN,GAChC,MAAOR,GACP,MAAMe,EAAiC,EAMvC,GAAIN,GAAqBF,EACvB,MAAMQ,EAGR,OAAOH,EAAKG,GAGTN,IACCC,aAAkBM,QACpBN,EAAOO,KAAKA,EAAML,GACTF,aAAkBQ,MAC3BN,EAAKF,GAELO,EAAKP,KASX,SAASE,EAAKZ,KAAUC,GACjBM,IACHA,GAAS,EACTX,EAASI,KAAUC,IASvB,SAASgB,EAAKE,GACZP,EAAK,KAAMO,IA7FPC,CAAKlB,EAAIH,EAATqB,IAAkBnB,GAElBL,EAAS,QAASK,IA/BtBF,CAAK,QAASL,IAdO2B,IAmDvB,SAAaC,GACX,GAA0B,mBAAfA,EACT,MAAM,IAAIxB,UACR,+CAAiDwB,GAKrD,OADA/B,EAAIoB,KAAKW,GACF9B,IAzDT,OAAOA,E","sources":["webpack://tech-stack/./node_modules/.pnpm/trough@2.1.0/node_modules/trough/index.js"],"sourcesContent":["/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or weâ€™re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n"],"names":["trough","fns","pipeline","run","values","middlewareIndex","callback","pop","TypeError","next","error","output","fn","index","length","undefined","middleware","called","parameters","fnExpectsCallback","result","push","done","apply","this","exception","Promise","then","Error","value","wrap","use","middelware"],"sourceRoot":""}