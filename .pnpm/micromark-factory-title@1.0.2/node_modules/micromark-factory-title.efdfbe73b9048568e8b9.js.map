{"version":3,"file":".pnpm/micromark-factory-title@1.0.2/node_modules/micromark-factory-title.efdfbe73b9048568e8b9.js","mappings":"kLAkBO,SAASA,EAAaC,EAASC,EAAIC,EAAKC,EAAMC,EAAYC,GAE/D,IAAIC,EACJ,OAGA,SAAeC,GAMb,OALAP,EAAQQ,MAAML,GACdH,EAAQQ,MAAMJ,GACdJ,EAAQS,QAAQF,GAChBP,EAAQU,KAAKN,GACbE,EAAkB,KAATC,EAAc,GAAKA,EACrBI,GAIT,SAASA,EAAkBJ,GACzB,OAAIA,IAASD,GACXN,EAAQQ,MAAMJ,GACdJ,EAAQS,QAAQF,GAChBP,EAAQU,KAAKN,GACbJ,EAAQU,KAAKP,GACNF,IAGTD,EAAQQ,MAAMH,GACPO,EAAaL,IAItB,SAASK,EAAaL,GACpB,OAAIA,IAASD,GACXN,EAAQU,KAAKL,GACNM,EAAkBL,IAGd,OAATC,EACKL,EAAIK,IAGT,QAAmBA,IACrBP,EAAQQ,MAAM,cACdR,EAAQS,QAAQF,GAChBP,EAAQU,KAAK,eACN,IAAAG,GAAab,EAASY,EAAc,gBAG7CZ,EAAQQ,MAAM,cAAe,CAC3BM,YAAa,WAERC,EAAMR,IAIf,SAASQ,EAAMR,GACb,OAAIA,IAASD,GAAmB,OAATC,IAAiB,QAAmBA,IACzDP,EAAQU,KAAK,eACNE,EAAaL,KAGtBP,EAAQS,QAAQF,GACA,KAATA,EAAcS,EAAcD,GAIrC,SAASC,EAAYT,GACnB,OAAIA,IAASD,GAAmB,KAATC,GACrBP,EAAQS,QAAQF,GACTQ,GAGFA,EAAMR","sources":["webpack://react-antd-admin/./node_modules/.pnpm/micromark-factory-title@1.0.2/node_modules/micromark-factory-title/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines canâ€™t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n"],"names":["factoryTitle","effects","ok","nok","type","markerType","stringType","marker","code","enter","consume","exit","atFirstTitleBreak","atTitleBreak","f","contentType","title","titleEscape"],"sourceRoot":""}