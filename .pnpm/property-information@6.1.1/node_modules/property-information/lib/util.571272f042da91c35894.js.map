{"version":3,"file":".pnpm/property-information@6.1.1/node_modules/property-information/lib/util.571272f042da91c35894.js","mappings":"4JAOO,SAASA,EAAyBC,EAAYC,GACnD,OAAO,OAAuBD,EAAYC,EAASC,iB,qBCH9C,SAASC,EAAuBH,EAAYI,GACjD,OAAOA,KAAaJ,EAAaA,EAAWI,GAAaA,E,wHCY3D,MAAMC,EAAM,GAAGC,eAMR,SAASC,EAAOC,GAErB,MAAMP,EAAW,GAEXQ,EAAS,GAEf,IAAIC,EAEJ,IAAKA,KAAQF,EAAWG,WACtB,GAAIN,EAAIO,KAAKJ,EAAWG,WAAYD,GAAO,CACzC,MAAMG,EAAQL,EAAWG,WAAWD,GAC9BI,EAAO,IAAI,IACfJ,EACAF,EAAWO,UAAUP,EAAWR,YAAc,GAAIU,GAClDG,EACAL,EAAWQ,OAIXR,EAAWS,iBACXT,EAAWS,gBAAgBC,SAASR,KAEpCI,EAAKG,iBAAkB,GAGzBhB,EAASS,GAAQI,EAEjBL,GAAO,OAAUC,IAASA,EAC1BD,GAAO,OAAUK,EAAKV,YAAcM,EAIxC,OAAO,IAAI,IAAOT,EAAUQ,EAAQD,EAAWQ,S,4ECnDjD,MAAMG,EAASC,OAAOC,KAAK,GAEpB,MAAMC,UAAoB,IAQ/BC,YAAYtB,EAAUG,EAAWoB,EAAMR,GACrC,IAAIS,GAAS,EAMb,GAJAC,MAAMzB,EAAUG,GAEhBuB,EAAKC,KAAM,QAASZ,GAEA,iBAATQ,EACT,OAASC,EAAQN,EAAOU,QAAQ,CAC9B,MAAMC,EAAQX,EAAOM,GACrBE,EAAKC,KAAMT,EAAOM,IAASD,EAAO,EAAMM,MAAY,EAAMA,MAalE,SAASH,EAAKI,EAAQC,EAAKnB,GACrBA,IAEFkB,EAAOC,GAAOnB,GAVlBS,EAAYW,UAAUC,SAAU,G,qDC/BzB,MAAMC,EAMXZ,YAAYtB,EAAUG,GAEpBwB,KAAK3B,SAAWA,EAEhB2B,KAAKxB,UAAYA,GAKrB+B,EAAKF,UAAUjB,MAAQ,KACvBmB,EAAKF,UAAUG,SAAU,EACzBD,EAAKF,UAAUI,YAAa,EAC5BF,EAAKF,UAAUK,mBAAoB,EACnCH,EAAKF,UAAUM,QAAS,EACxBJ,EAAKF,UAAUO,gBAAiB,EAChCL,EAAKF,UAAUQ,gBAAiB,EAChCN,EAAKF,UAAUS,uBAAwB,EACvCP,EAAKF,UAAUhB,iBAAkB,EACjCkB,EAAKF,UAAUC,SAAU,G,mECZlB,SAASS,EAAMC,EAAa5B,GAEjC,MAAMf,EAAW,GAEXQ,EAAS,GACf,IAAIgB,GAAS,EAEb,OAASA,EAAQmB,EAAYf,QAC3BT,OAAOyB,OAAO5C,EAAU2C,EAAYnB,GAAOxB,UAC3CmB,OAAOyB,OAAOpC,EAAQmC,EAAYnB,GAAOhB,QAG3C,OAAO,IAAI,IAAOR,EAAUQ,EAAQO,K,qDClB/B,MAAM8B,EAOXvB,YAAYtB,EAAUQ,EAAQO,GAC5BY,KAAK3B,SAAWA,EAChB2B,KAAKnB,OAASA,EACVO,IACFY,KAAKZ,MAAQA,IAMnB8B,EAAOb,UAAUhC,SAAW,GAE5B6C,EAAOb,UAAUxB,OAAS,GAE1BqC,EAAOb,UAAUjB,MAAQ,M,uRC3BzB,IAAI+B,EAAS,EAEN,MAAMX,EAAUY,IACVX,EAAaW,IACbV,EAAoBU,IACpBT,EAASS,IACTP,EAAiBO,IACjBR,EAAiBQ,IACjBN,EAAwBM,IAErC,SAASA,IACP,OAAO,KAAOD","sources":["webpack://tech-stack/./node_modules/.pnpm/property-information@6.1.1/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://tech-stack/./node_modules/.pnpm/property-information@6.1.1/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://tech-stack/./node_modules/.pnpm/property-information@6.1.1/node_modules/property-information/lib/util/create.js","webpack://tech-stack/./node_modules/.pnpm/property-information@6.1.1/node_modules/property-information/lib/util/defined-info.js","webpack://tech-stack/./node_modules/.pnpm/property-information@6.1.1/node_modules/property-information/lib/util/info.js","webpack://tech-stack/./node_modules/.pnpm/property-information@6.1.1/node_modules/property-information/lib/util/merge.js","webpack://tech-stack/./node_modules/.pnpm/property-information@6.1.1/node_modules/property-information/lib/util/schema.js","webpack://tech-stack/./node_modules/.pnpm/property-information@6.1.1/node_modules/property-information/lib/util/types.js"],"sourcesContent":["import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n"],"names":["caseInsensitiveTransform","attributes","property","toLowerCase","caseSensitiveTransform","attribute","own","hasOwnProperty","create","definition","normal","prop","properties","call","value","info","transform","space","mustUseProperty","includes","checks","Object","keys","DefinedInfo","constructor","mask","index","super","mark","this","length","check","values","key","prototype","defined","Info","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","merge","definitions","assign","Schema","powers","increment"],"sourceRoot":""}