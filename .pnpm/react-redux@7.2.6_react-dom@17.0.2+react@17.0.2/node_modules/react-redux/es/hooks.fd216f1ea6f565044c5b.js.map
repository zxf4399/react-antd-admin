{"version":3,"file":".pnpm/react-redux@7.2.6_react-dom@17.0.2+react@17.0.2/node_modules/react-redux/es/hooks.fd216f1ea6f565044c5b.js","mappings":"kLASO,SAASA,EAAmBC,QACjB,IAAZA,IACFA,EAAU,KAGZ,IAAIC,EAAWD,IAAY,IAAoB,KAAkB,OAAgBA,GACjF,OAAO,WAEL,OADYC,IACCC,UAyBV,IAAIC,EAA2BJ,K,6ECvB/B,SAASK,IAOd,OANmB,IAAAC,YAAW,O,2GCd5BC,EAAc,SAAqBC,EAAGC,GACxC,OAAOD,IAAMC,GA0FR,SAASC,EAAmBT,QACjB,IAAZA,IACFA,EAAU,KAGZ,IAAII,EAAkBJ,IAAY,IAAoB,IAAyB,WAC7E,OAAO,IAAAK,YAAWL,IAEpB,OAAO,SAAqBU,EAAUC,QACjB,IAAfA,IACFA,EAAaL,GAiBf,IAAIM,EAAmBR,IAInBS,EAtHR,SAA6CH,EAAUC,EAAYG,EAAOC,GACxE,IAaIF,EAVAG,GAHc,IAAAC,aAAW,SAAUC,GACrC,OAAOA,EAAI,IACV,GAC2B,GAE1BC,GAAe,IAAAC,UAAQ,WACzB,OAAO,OAAmBN,EAAOC,KAChC,CAACD,EAAOC,IACPM,GAAkC,IAAAC,UAClCC,GAAiB,IAAAD,UACjBE,GAAmB,IAAAF,UACnBG,GAAsB,IAAAH,UACtBI,EAAaZ,EAAMa,WAGvB,IACE,GAAIjB,IAAaa,EAAeK,SAAWF,IAAeF,EAAiBI,SAAWP,EAAgCO,QAAS,CAC7H,IAAIC,EAAmBnB,EAASgB,GAK9Bb,OAHkCiB,IAAhCL,EAAoBG,SAA0BjB,EAAWkB,EAAkBJ,EAAoBG,SAGjFH,EAAoBG,QAFpBC,OAKlBhB,EAAgBY,EAAoBG,QAEtC,MAAOG,GAKP,MAJIV,EAAgCO,UAClCG,EAAIC,SAAW,4DAA8DX,EAAgCO,QAAQK,MAAQ,QAGzHF,EA4CR,OAzCA,QAA0B,WACxBR,EAAeK,QAAUlB,EACzBc,EAAiBI,QAAUF,EAC3BD,EAAoBG,QAAUf,EAC9BQ,EAAgCO,aAAUE,MAE5C,QAA0B,WACxB,SAASI,IACP,IACE,IAAIC,EAAgBrB,EAAMa,WAE1B,GAAIQ,IAAkBX,EAAiBI,QACrC,OAGF,IAAIQ,EAAoBb,EAAeK,QAAQO,GAE/C,GAAIxB,EAAWyB,EAAmBX,EAAoBG,SACpD,OAGFH,EAAoBG,QAAUQ,EAC9BZ,EAAiBI,QAAUO,EAC3B,MAAOJ,GAKPV,EAAgCO,QAAUG,EAG5Cf,IAMF,OAHAG,EAAakB,cAAgBH,EAC7Bf,EAAamB,eACbJ,IACO,WACL,OAAOf,EAAaoB,oBAErB,CAACzB,EAAOK,IACJN,EAyCe2B,CAAoC9B,EAAUC,EAHtDC,EAAiBE,MACZF,EAAiBO,cAIlC,OADA,IAAAsB,eAAc5B,GACPA,GA2BJ,IAAI6B,EAA2BjC,K,8GCnJ/B,SAASkC,EAAgB3C,QACd,IAAZA,IACFA,EAAU,KAGZ,IAAII,EAAkBJ,IAAY,IAAoB,IAAyB,WAC7E,OAAO,IAAAK,YAAWL,IAEpB,OAAO,WAIL,OAHuBI,IACMU,OAqB1B,IAAIb,EAAwB0C","sources":["webpack://react-antd-admin/./node_modules/.pnpm/react-redux@7.2.6_react-dom@17.0.2+react@17.0.2/node_modules/react-redux/es/hooks/useDispatch.js","webpack://react-antd-admin/./node_modules/.pnpm/react-redux@7.2.6_react-dom@17.0.2+react@17.0.2/node_modules/react-redux/es/hooks/useReduxContext.js","webpack://react-antd-admin/./node_modules/.pnpm/react-redux@7.2.6_react-dom@17.0.2+react@17.0.2/node_modules/react-redux/es/hooks/useSelector.js","webpack://react-antd-admin/./node_modules/.pnpm/react-redux@7.2.6_react-dom@17.0.2+react@17.0.2/node_modules/react-redux/es/hooks/useStore.js"],"sourcesContent":["import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\n\nexport function createDispatchHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useStore = context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\n\nexport var useDispatch = /*#__PURE__*/createDispatchHook();","import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\n/**\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @returns {any} the value of the `ReactReduxContext`\n *\n * @example\n *\n * import React from 'react'\n * import { useReduxContext } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const { store } = useReduxContext()\n *   return <div>{store.getState()}</div>\n * }\n */\n\nexport function useReduxContext() {\n  var contextValue = useContext(ReactReduxContext);\n\n  if (process.env.NODE_ENV !== 'production' && !contextValue) {\n    throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');\n  }\n\n  return contextValue;\n}","import { useReducer, useRef, useMemo, useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport { ReactReduxContext } from '../components/Context';\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return createSubscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestStoreState = useRef();\n  var latestSelectedState = useRef();\n  var storeState = store.getState();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {\n      var newSelectedState = selector(storeState); // ensure latest selected state is reused so that a custom equality function can result in identical references\n\n      if (latestSelectedState.current === undefined || !equalityFn(newSelectedState, latestSelectedState.current)) {\n        selectedState = newSelectedState;\n      } else {\n        selectedState = latestSelectedState.current;\n      }\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestStoreState.current = storeState;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newStoreState = store.getState(); // Avoid calling selector multiple times if the store's state has not changed\n\n        if (newStoreState === latestStoreState.current) {\n          return;\n        }\n\n        var _newSelectedState = latestSelector.current(newStoreState);\n\n        if (equalityFn(_newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = _newSelectedState;\n        latestStoreState.current = newStoreState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(\"You must pass a selector to useSelector\");\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(\"You must pass a function as a selector to useSelector\");\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(\"You must pass a function as an equality function to useSelector\");\n      }\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\nexport var useSelector = /*#__PURE__*/createSelectorHook();","import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\n/**\n * Hook factory, which creates a `useStore` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useStore` hook bound to the specified context.\n */\n\nexport function createStoreHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useStore() {\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store;\n\n    return store;\n  };\n}\n/**\n * A hook to access the redux store.\n *\n * @returns {any} the redux store\n *\n * @example\n *\n * import React from 'react'\n * import { useStore } from 'react-redux'\n *\n * export const ExampleComponent = () => {\n *   const store = useStore()\n *   return <div>{store.getState()}</div>\n * }\n */\n\nexport var useStore = /*#__PURE__*/createStoreHook();"],"names":["createDispatchHook","context","useStore","dispatch","useDispatch","useReduxContext","useContext","refEquality","a","b","createSelectorHook","selector","equalityFn","_useReduxContext","selectedState","store","contextSub","forceRender","useReducer","s","subscription","useMemo","latestSubscriptionCallbackError","useRef","latestSelector","latestStoreState","latestSelectedState","storeState","getState","current","newSelectedState","undefined","err","message","stack","checkForUpdates","newStoreState","_newSelectedState","onStateChange","trySubscribe","tryUnsubscribe","useSelectorWithStoreAndSubscription","useDebugValue","useSelector","createStoreHook"],"sourceRoot":""}