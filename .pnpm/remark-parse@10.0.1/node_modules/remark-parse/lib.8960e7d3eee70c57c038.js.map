{"version":3,"file":".pnpm/remark-parse@10.0.1/node_modules/remark-parse/lib.8960e7d3eee70c57c038.js","mappings":"4JAQe,SAASA,EAAYC,GAkBlCC,OAAOC,OAAOC,KAAM,CAACC,OAhBLC,IAEd,MAAMC,EAAmCH,KAAKI,KAAK,YAEnD,OAAO,OACLF,EACAJ,OAAOC,OAAO,GAAII,EAAUN,EAAS,CAInCQ,WAAYL,KAAKI,KAAK,wBAA0B,GAChDE,gBAAiBN,KAAKI,KAAK,2BAA6B","sources":["webpack://tech-stack/./node_modules/.pnpm/remark-parse@10.0.1/node_modules/remark-parse/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n"],"names":["remarkParse","options","Object","assign","this","Parser","doc","settings","data","extensions","mdastExtensions"],"sourceRoot":""}